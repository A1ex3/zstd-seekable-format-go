name: go

on:
  push:
    branches: ['*']
    tags: ['v*']
  pull_request:
    branches: ['*']

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24.4']
        dir: ['pkg', 'cmd/zstdseek']
    steps:
      - uses: dcarbone/install-jq-action@v3.1.1
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: ${{ matrix.dir }}/go.sum
      - name: Display Go version
        run: go version
      - name: Install dependencies (${{ matrix.dir }})
        working-directory: ./${{ matrix.dir }}
        run: |
          go get .
      - name: go work
        run: |
          if [ "${{ matrix.dir }}" == "pkg" ]; then
            echo "Skipping go workspace for ${{ matrix.dir }}"
            rm -f go.work*
            exit 0
          fi
          go work init
          go work use pkg
          go work use ${{ matrix.dir }}
      - name: Build (${{ matrix.dir }})
        working-directory: ./${{ matrix.dir }}
        run: |
          for OSARCH in $(go tool dist list -json | jq -r '.[] | select(.FirstClass) | [.GOOS , .GOARCH] | join("/")'); do
            IFS="/" read -r OS ARCH <<< "$OSARCH"
            echo "Building for $OS $ARCH"
            GOOS=$OS GOARCH=$ARCH go build ./...
          done
      - name: Test (${{ matrix.dir }})
        working-directory: ./${{ matrix.dir }}
        run: go test -v ./...
