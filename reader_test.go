package seekable

import (
	"io"
	"testing"

	"github.com/stretchr/testify/assert"
)

type seekableReader struct {
	buf    []byte
	offset uint64
}

func (s *seekableReader) Read(p []byte) (n int, err error) {
	size := uint64(len(s.buf)) - s.offset
	if size > uint64(len(p)) {
		size = uint64(len(p))
	}

	copy(p, s.buf[s.offset:s.offset+size])

	s.offset += size
	return int(size), nil
}

func (s *seekableReader) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekCurrent:
		s.offset += uint64(offset)
	case io.SeekStart:
		s.offset = uint64(offset)
	case io.SeekEnd:
		s.offset = uint64(len(s.buf)) + uint64(offset)
	}
	return 0, nil
}

func TestReaderCheck(t *testing.T) {
	checksum := []byte{
		// frame 1
		0x28, 0xb5, 0x2f, 0xfd, 0x04, 0x00, 0x21, 0x00, 0x00,
		// "test"
		0x74, 0x65, 0x73, 0x74,
		0x39, 0x81, 0x67, 0xdb,
		// frame 2
		0x28, 0xb5, 0x2f, 0xfd, 0x04, 0x00, 0x29, 0x00, 0x00,
		// "test2"
		0x74, 0x65, 0x73, 0x74, 0x32,
		0x87, 0xeb, 0x11, 0x71,
		// skippable frame
		0x5e, 0x2a, 0x4d, 0x18,
		0x21, 0x00, 0x00, 0x00,
		// index
		0x11, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x39, 0x81, 0x67, 0xdb,
		0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x87, 0xeb, 0x11, 0x71,
		// footer
		0x02, 0x00, 0x00, 0x00,
		0x80,
		0xb1, 0xea, 0x92, 0x8f,
	}

	noChecksum := []byte{
		// frame 1
		0x28, 0xb5, 0x2f, 0xfd, 0x04, 0x00, 0x21, 0x00, 0x00,
		// "test"
		0x74, 0x65, 0x73, 0x74,
		0x39, 0x81, 0x67, 0xdb,
		// frame 2
		0x28, 0xb5, 0x2f, 0xfd, 0x04, 0x00, 0x29, 0x00, 0x00,
		// "test2"
		0x74, 0x65, 0x73, 0x74, 0x32,
		0x87, 0xeb, 0x11, 0x71,
		// skippable frame
		0x5e, 0x2a, 0x4d, 0x18,
		0x19, 0x00, 0x00, 0x00,
		// index
		0x11, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		// footer
		0x02, 0x00, 0x00, 0x00,
		0x00,
		0xb1, 0xea, 0x92, 0x8f,
	}

	for _, b := range [][]byte{checksum, noChecksum} {
		sr := &seekableReader{buf: b}
		r, err := NewReader(sr)
		assert.NoError(t, err)

		bytes1 := []byte("test")
		bytes2 := []byte("test2")

		tmp := make([]byte, 4096)
		n, err := r.Read(tmp)
		assert.NoError(t, err)
		assert.Equal(t, len(bytes1), n)
		assert.Equal(t, bytes1, tmp[:n])

		n, err = r.Read(tmp)
		assert.NoError(t, err)
		assert.Equal(t, len(bytes2), n)
		assert.Equal(t, bytes2, tmp[:n])

		_, err = r.Read(tmp)
		assert.Equal(t, err, io.EOF)
	}
}
